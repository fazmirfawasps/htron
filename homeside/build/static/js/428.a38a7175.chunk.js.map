{"version":3,"file":"static/js/428.a38a7175.chunk.js","mappings":"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","sources":["components/HostPropertyCard.jsx","pages/Viewhosted.jsx"],"sourcesContent":["import * as React from 'react'\r\nimport { Grid, Box, CardMedia, useMediaQuery } from '@mui/material'\r\nimport Card from '@mui/material/Card'\r\nimport Typography from '@mui/material/Typography'\r\nimport { Stack } from '@mui/system'\r\nimport BtnComponent from './btncomponent'\r\nimport { red, blue } from '@mui/material/colors'\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction HostPropertyCard({ editProperty, removeProperty, property}) {\r\n  \r\n    const matches = useMediaQuery('(min-width:600px)')\r\n    const style1 = {\r\n        bgcolor: blue[500],\r\n    }\r\n\r\n    const style2 = {\r\n        bgcolor: red[500],\r\n    }\r\n    return (\r\n            <Grid container xs={12} mt={2} spacing={2}>\r\n                {property?.map((item, index) => (\r\n                    <Grid item key={item._id} md={3}>\r\n                        <Card\r\n                            className=\"\"\r\n                            sx={{\r\n                                maxWidth: matches ? 200 : 300,\r\n                                boxShadow: 'none',\r\n                            }}\r\n                        >\r\n                            <Box\r\n                                component={'div'}\r\n                                sx={{\r\n                                    position: 'relative',\r\n                                    bgcolor: 'transparent',\r\n                                }}\r\n                            >\r\n                                <CardMedia\r\n                                    key={index}\r\n                                    component=\"img\"\r\n                                    sx={{ height: 200, borderRadius: 3 }}\r\n                                    src={item.imageFilenames && item.imageFilenames.length > 0 ? item.imageFilenames[0] : ''}\r\n                                />\r\n                            </Box>\r\n                            <Stack direction={'column'} spacing={0}>\r\n                                <Typography\r\n                                    gutterBottom\r\n                                    variant=\"body1\"\r\n                                    sx={{\r\n                                        display: 'inline-block',\r\n                                        textOverflow: 'ellipsis',\r\n                                        overflow: 'hidden',\r\n                                        whiteSpace: 'nowrap',\r\n                                    }}\r\n                                    component=\"\"\r\n                                >\r\n                                    {item.PropertyName}\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" bold>\r\n                                    â‚¹{item.Price}\r\n                                    <Typography variant=\"caption\">\r\n                                        /day\r\n                                    </Typography>\r\n                                </Typography>\r\n                            </Stack>\r\n                            <Stack direction={'row'} spacing={2}>\r\n                                <BtnComponent\r\n                                    variant={'contained'}\r\n                                    style={style1}\r\n                                    callback={() => {\r\n                                        editProperty(item._id)\r\n                                    }}\r\n                                    content={'Modifiy'}\r\n                                />\r\n                                <BtnComponent\r\n                                    variant={'contained'}\r\n                                    style={style2}\r\n                                    callback={() => {\r\n                                        removeProperty(item._id)\r\n                                    }}\r\n                                    content={'Remove'}\r\n                                />\r\n                            </Stack>\r\n                        </Card>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n    )\r\n}\r\n\r\n\r\n  \r\nHostPropertyCard.propTypes = {\r\n    editProperty: PropTypes.func.isRequired,\r\n    removeProperty: PropTypes.func.isRequired,\r\n    property: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        _id: PropTypes.string.isRequired,\r\n        PropertyName: PropTypes.string.isRequired,\r\n        Price: PropTypes.number.isRequired,\r\n        imageFilenames: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n      })\r\n    ).isRequired,\r\n  };\r\n  \r\nexport default HostPropertyCard\r\n","import { Box, Typography, Container } from '@mui/material'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\n// import { useParams } from 'react-router-dom';\r\n// import PropTypes from 'prop-types';\r\n// import { useSelector, useDispatch } from 'react-redux'\r\n// import HostPropetyCard from '../component/HostPropertyCard'\r\nimport HostPropertyCard from '../components/HostPropertyCard';\r\nimport { ExternalContext } from '../context/CustomContext'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { deleteProperty } from '../api/apicall';\r\nimport { setIshosted } from \"../redux/redux\";\r\n\r\n\r\n\r\n// import { RemoveProperties } from '../Redux/properties/propertiesAction'\r\nimport { GetHostedProperty ,GetAllProperty} from '../api/apicall';\r\nimport { useSelector, useDispatch, } from 'react-redux'\r\n\r\n\r\n\r\nexport default function Viewhosted() {\r\n    // const { id } = useParams();\r\n    const id = useSelector((state) => state.user.id)\r\n    const [change, setChange] = useState(true)\r\n\r\n    const dispatch = useDispatch()\r\n    const [hostedProperty, setHostedproperty] = useState([])\r\n    const { setPropertyEdit } = useContext(ExternalContext)\r\n    console.log(id);\r\n\r\n    useEffect(() => {\r\n        GetHostedProperty(id).then(({ data }) => {\r\n            console.log(data);\r\n            console.log('itth work avand');\r\n            setHostedproperty(data)\r\n        })\r\n    }, [change])\r\n    useEffect(() => {\r\n        GetAllProperty().then(({ data }) => {\r\n\r\n\r\n            console.log(id);\r\n            const isHosted = data.find((item) => item.hostid === id)\r\n            if (isHosted) {\r\n                console.log('TRUE BOOLEAN');\r\n                dispatch(setIshosted(true))\r\n\r\n            }\r\n            else {\r\n                dispatch(setIshosted(false))\r\n                console.log('false BOOLEAN');\r\n\r\n            }\r\n        })\r\n    }, [change])\r\n\r\n    // let userID = useSelector((state) => state.user.userDetails._id)\r\n    // let hostedProperty = useSelector((state) =>\r\n    //     state.properties.propertyArray.filter((item) => item.hostid == userID)\r\n    // )\r\n    // const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    // const { setPropertyEdit } = useContext(ExternalContext)\r\n    function editProperty(id) {\r\n        let PropertyToedit = hostedProperty?.find((item) => item._id == id)\r\n        console.log('NAJAN AANE');\r\n        console.log(PropertyToedit);\r\n        // for (var i = 0; i < PropertyToedit.length; i++) {\r\n        //     PropertyToedit[i].vehicleType = PropertyToedit[i].VehicleType;\r\n        //     delete PropertyToedit[i].PropertyToedit .images = PropertyToedit.imageFilenames;;\r\n        //     console.log('DONE');\r\n        //   }\r\n        PropertyToedit.images = PropertyToedit.imageFilenames;\r\n        PropertyToedit.vehicleType = PropertyToedit.VehicleType;\r\n        delete PropertyToedit.imageFilenames;\r\n        delete PropertyToedit.VehicleType;\r\n\r\n\r\n        setPropertyEdit(PropertyToedit)\r\n        console.log(PropertyToedit);\r\n        navigate(`/Edit-listed-property/${id}`)\r\n    }\r\n\r\n    function removeProperty(id) {\r\n        deleteProperty(id)\r\n            .then(({ data }) => {\r\n                console.log('ithum checked');\r\n                setChange(!change)\r\n                console.log(data);\r\n            })\r\n            .catch((err) => alert(err))\r\n    }\r\n\r\n    return (\r\n        <Box mt={10}>\r\n            <Container maxWidth=\"xl\" sx={{ width: '94%' }}>\r\n                <Typography variant=\"h4\" color={'#955251'} fontWeight={600}>\r\n                    Listed Property\r\n                </Typography>\r\n                <HostPropertyCard\r\n                    editProperty={editProperty}\r\n                    removeProperty={removeProperty}\r\n                    property={hostedProperty}\r\n                />\r\n            </Container>\r\n        </Box>\r\n    )\r\n}\r\n"],"names":["_ref","editProperty","removeProperty","property","matches","useMediaQuery","style1","bgcolor","blue","style2","red","_jsx","Grid","container","xs","mt","spacing","children","map","item","index","md","_jsxs","Card","className","sx","maxWidth","boxShadow","Box","component","position","CardMedia","height","borderRadius","src","imageFilenames","length","Stack","direction","Typography","gutterBottom","variant","display","textOverflow","overflow","whiteSpace","PropertyName","bold","Price","BtnComponent","style","callback","_id","content","Viewhosted","id","useSelector","state","user","_useState","useState","_useState2","_slicedToArray","change","setChange","dispatch","useDispatch","_useState3","_useState4","hostedProperty","setHostedproperty","setPropertyEdit","useContext","ExternalContext","console","log","useEffect","GetHostedProperty","then","data","GetAllProperty","_ref2","find","hostid","setIshosted","navigate","useNavigate","Container","width","color","fontWeight","HostPropertyCard","PropertyToedit","images","vehicleType","VehicleType","concat","deleteProperty","_ref3","catch","err","alert"],"sourceRoot":""}