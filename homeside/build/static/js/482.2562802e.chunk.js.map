{"version":3,"file":"static/js/482.2562802e.chunk.js","mappings":"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","sources":["layout/Bookingcard.jsx","layout/SinglwProduct.jsx"],"sourcesContent":["import React from 'react'\r\nimport { Box, Typography, Button, Card, Stack } from '@mui/material'\r\nimport { DemoContainer, DemoItem } from '@mui/x-date-pickers/internals/demo'\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider'\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker'\r\nimport ChatIcon from '@mui/icons-material/Chat'\r\nimport dayjs from 'dayjs'\r\nimport { format } from 'date-fns'\r\n// import { ExternalContext } from '../context/CustomContext'\r\n// import { useNavigate } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\n// import MenuItem from '@mui/material/MenuItem'\r\n// import FormControl from '@mui/material/FormControl'\r\n// import Select from '@mui/material/Select'\r\n// import { useEffect } from 'react'\r\nimport { checkout, addconverstaion } from '../api/apicall'\r\nimport swal from 'sweetalert';\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\n\r\nexport default function BookingCard({ SingleProperty }) {\r\n    let userid = useSelector((state) => state.user.id)\r\n    const navigate = useNavigate()\r\n\r\n    const [startDate, setStartDate] = React.useState(dayjs())\r\n    const [endDate, setEndDate] = React.useState(dayjs().add(1, 'day'))\r\n    // const { setAlert } = React.useContext(ExternalContext)\r\n    const [counter, setCounter] = React.useState(false);\r\n\r\n    const [days, setDays] = React.useState(1)\r\n    const [totalAmount, setTotalAmount] = React.useState()\r\n    // const isLoggedin = useSelector('')\r\n    // const { setOpenlogin } = React.useContext(ExternalContext)\r\n    const isLoggedin = true\r\n\r\n\r\n    function handledate(date) {\r\n        const formattedDate = format(date.$d, 'yyyy-MM-dd')\r\n        return formattedDate\r\n    }\r\n\r\n    function handlecheckin(value) {\r\n        setStartDate(dayjs(value))\r\n        setEndDate(dayjs(value).add(1, 'day'))\r\n    }\r\n    function handleChatWithHost() {\r\n\r\n\r\n        console.log('working chat');\r\n        let data = {\r\n            senderid: userid,\r\n            receiverid: SingleProperty.hostid,\r\n        }\r\n        addconverstaion(data)\r\n            .then(() => {\r\n                navigate('/chat')\r\n            })\r\n            .catch((err) => {\r\n                alert(err)\r\n            })\r\n    }\r\n\r\n    function handlecheckout(value) {\r\n        console.log(SingleProperty.NotAvailable);\r\n        const startDateStartOfDay = startDate.startOf('day')\r\n        const valueStartOfDay = dayjs(value).startOf('day')\r\n        if (startDateStartOfDay.isSame(valueStartOfDay)) {\r\n            setEndDate(dayjs(value).add(1, 'day'))\r\n        } else {\r\n            setEndDate(dayjs(value))\r\n        }\r\n\r\n        let diff = dayjs(value).diff(startDate, 'day') + 1\r\n        let days = diff > 0 ? diff : 1\r\n        setCounter(true)\r\n        let TotalAmt = SingleProperty.Price * days\r\n        setTotalAmount(TotalAmt)\r\n        setDays(diff)\r\n    }\r\n    function handleReserve() {\r\n        const checkin = handledate(startDate)\r\n        const checkOut = handledate(endDate)\r\n        console.log(startDate);\r\n        const formattedStartDateToCheck = checkin.slice(2);\r\n        const formattedEndDateToCheck = checkOut.slice(2);\r\n        console.log('check dates')\r\n        console.log(formattedEndDateToCheck);\r\n        let totalAmunt\r\n        if (!totalAmount) {\r\n            totalAmunt = SingleProperty.Price\r\n            console.log('nthann');\r\n            console.log(totalAmunt);\r\n        }\r\n        else {\r\n            console.log('preshnm');\r\n            totalAmunt = totalAmount\r\n        }\r\n        console.log(totalAmount);\r\n        console.log(checkin);\r\n        if (!SingleProperty.NotAvailable) {\r\n            console.log(totalAmunt);\r\n            console.log('WORKING');\r\n            checkout(\r\n                SingleProperty,\r\n                checkin,\r\n                checkOut,\r\n                SingleProperty.hostid,\r\n                totalAmunt,\r\n                userid\r\n            )\r\n                .then((response) => {\r\n                    console.log(response)\r\n                    window.location.href = response.data.url\r\n                    // window.history.pushState(null, null, response.data.url)\r\n                })\r\n                .catch((err) => {\r\n                    alert(err)\r\n                })\r\n\r\n        }\r\n        else {\r\n            if (SingleProperty.NotAvailable.includes(formattedStartDateToCheck) || SingleProperty.NotAvailable.includes(formattedEndDateToCheck)) {\r\n                console.log('At least one of the dates is not available');\r\n                swal({\r\n                    title: 'Dates not availablr',\r\n                    text: ` The following dates are not available: ${SingleProperty.NotAvailable.join(', ')}`,\r\n                    icon: 'warning',\r\n                    buttons: 'OK',\r\n                    dangerMode: true,\r\n                })\r\n            } else {\r\n                checkout(\r\n                    SingleProperty,\r\n                    checkin,\r\n                    checkOut,\r\n                    userid,\r\n                    totalAmunt,\r\n\r\n                )\r\n                    .then((response) => {\r\n                        console.log(response)\r\n                        window.location.href = response.data.url\r\n                    })\r\n                    .catch((err) => {\r\n                        alert(err)\r\n                    })\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    console.log(SingleProperty.NotAvailable);\r\n    \r\n    \r\n      \r\n      const disabledDates = SingleProperty.NotAvailable && SingleProperty.NotAvailable.map(dateString => {\r\n        const [year, month, day] = dateString.split('-');\r\n        return new Date(20 + year, month - 1, day);\r\n      }) || [];\r\n\r\n\r\n      function shouldDisableDate(date) {\r\n        const currentDate = new Date(date);\r\n        return disabledDates.some(disabledDate =>\r\n          currentDate.getFullYear() === disabledDate.getFullYear() &&\r\n          currentDate.getMonth() === disabledDate.getMonth() &&\r\n          currentDate.getDate() === disabledDate.getDate()\r\n        );\r\n      }\r\n    return (\r\n        <Card\r\n            sx={{\r\n                width: 350,\r\n                height: 'auto',\r\n                p: 2,\r\n                borderStyle: 'solid',\r\n                borderWidth: '.2px',\r\n                borderColor: '#dddddd',\r\n                boxShadow: 2,\r\n            }}\r\n        >\r\n            <Stack direction={'column'} spacing={2}>\r\n                <Typography variant=\"h5\">\r\n                    ₹  {SingleProperty.Price} /day\r\n                </Typography>\r\n\r\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                    <DemoContainer components={['DatePicker']}>\r\n                        <DemoItem label=\"check-in\">\r\n                            <DatePicker\r\n                                onChange={handlecheckin}\r\n                                value={startDate}\r\n                                disablePast\r\n                                shouldDisableDate={shouldDisableDate}\r\n                                defaultValue={startDate}\r\n                            />\r\n                        </DemoItem>\r\n                        <DemoItem label=\"check-out\">\r\n                            <DatePicker\r\n                                onChange={handlecheckout}\r\n                                value={endDate}\r\n                                disablePast\r\n                                shouldDisableDate={shouldDisableDate}\r\n\r\n                                minDate={startDate}\r\n                            />\r\n                        </DemoItem>\r\n                    </DemoContainer>\r\n                </LocalizationProvider>\r\n\r\n\r\n\r\n                <Stack direction={'column'} spacing={2}>\r\n                    {isLoggedin ? (\r\n                        <>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                onClick={() => {\r\n                                    handleReserve()\r\n                                }}\r\n                            >\r\n                                Book Now\r\n                            </Button>\r\n                            <Button\r\n                                startIcon={<ChatIcon />}\r\n                                variant=\"contained\"\r\n                                onClick={handleChatWithHost}\r\n                            >\r\n                                Chat with host\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <Button variant=\"contained\"\r\n                        // onClick={handleLogin}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    )}\r\n                </Stack>\r\n                <Box display={'flex'} flexDirection={'row'}>\r\n                    <Typography flexGrow={1}>\r\n                        ₹ {SingleProperty.Price}x{days} days\r\n                    </Typography>\r\n                    <Typography>\r\n                        ₹{counter ? totalAmount : SingleProperty.Price}\r\n                    </Typography>\r\n                </Box>\r\n                <Box display={'flex'} flexDirection={'row'}>\r\n                    <Typography flexGrow={1} variant=\"h6\" fontWeight={600}>\r\n                        Total\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" fontWeight={600}>\r\n                        ₹{counter ? totalAmount : SingleProperty.Price}\r\n                    </Typography>\r\n                </Box>\r\n            </Stack>\r\n        </Card>\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import * as React from 'react'\r\nimport { Box, CardMedia, Container, Typography } from '@mui/material'\r\nimport Grid from '@mui/material/Unstable_Grid2'\r\nimport { Stack } from '@mui/system'\r\n// import Avatar from '@mui/material/Avatar'\r\nimport Divider from '@mui/material/Divider'\r\n// import { useSelector } from 'react-redux'\r\nimport LocationOnIcon from '@mui/icons-material/LocationOn'\r\nimport api from '../axios/axios'\r\nimport BookingCard from './Bookingcard'\r\n// import FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\n// import ShareIcon from '@mui/icons-material/Share';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nexport default function SingleProperty() {\r\n    const { id } = useParams();\r\n    let count =0\r\n    const [SingleProperty, setSingleProperty] = React.useState({})\r\n    React.useEffect(() => {\r\n        api.get('/getAllproperty').then(({ data }) => {\r\n            console.log(data)\r\n            console.log(count+1);\r\n            console.log('SINGLE PROPERTY');\r\n            let singleProperty = data.find((item) => item._id == id)\r\n            console.log(singleProperty);\r\n            setSingleProperty(singleProperty)\r\n\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\" sx={{ width: '94%' ,height:'1400px' }}>\r\n            <Box sx={{ flexGrow: 1, pt: 2 }}>\r\n                <Typography\r\n                    variant=\"h5\"\r\n                    color=\"primary\"\r\n                    fontWeight={'600'}\r\n                    marginTop={5}\r\n                    p={2}\r\n                    pl={0}\r\n                >\r\n                    {SingleProperty.PropertyName}\r\n                </Typography>\r\n                <Typography variant=\"h6\" fontWeight={'500'} p={2} pl={0}>\r\n                    <LocationOnIcon fontSize=\"small\" />\r\n                    {SingleProperty.Address}\r\n                </Typography>\r\n                <Grid container spacing={1}>\r\n                    {SingleProperty.imageFilenames?.map((img, index) => (\r\n                        <Grid\r\n                            {...{ xs: 12, sm: 6, md: 4, lg: 4 }}\r\n                            key={index}\r\n                            minHeight={160}\r\n                        >\r\n                            <CardMedia sx={{ height: 200 }} image={img} />\r\n\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n                <Grid container mt={2}>\r\n                    <Grid item lg={7} sx={{\r\n                        width: 300,\r\n                        height: 'auto',\r\n                        p: 2,\r\n                        mt: 6,\r\n                        borderStyle: 'solid',\r\n                        borderWidth: '.2px',\r\n                        borderColor: '#dddddd',\r\n                        boxShadow: 2,\r\n                    }}>\r\n                        <Stack direction={'column'} spacing={2} pt={2}>\r\n                            <Box display={'flex'} flexDirection={'row'} justifyContent={'center'} >\r\n                                <Typography\r\n                                    flexGrow={1}\r\n                                    variant=\"h4\"\r\n                                    color=\"primary\"\r\n                                    justifyContent={'center'}\r\n                                >Fousia Crane Services</Typography>\r\n\r\n                             \r\n                                {/* <Stack direction={'row'} spacing={4} >\r\n                                    <FavoriteBorderIcon sx={{ fontSize: 44, }}></FavoriteBorderIcon>\r\n                                    <ShareIcon sx={{ fontSize: 44, }}></ShareIcon>\r\n\r\n                                </Stack> */}\r\n                            </Box>\r\n                            <Divider sx={{ mt: 1 }} />\r\n                            <Typography\r\n                                fontWeight={600}\r\n                                variant=\"body1\"\r\n                            >\r\n                                {/* {`${SingleProperty.Maxguest} guest/room. ${SingleProperty.Facility.Bedrooms} bedroom. ${SingleProperty.Facility.Bathrooms} toilet. ${SingleProperty.Facility.Balcony} balcony. ${SingleProperty.Facility.Kitchen} kitchen.`} */}\r\n                                2500 per day\r\n\r\n                            </Typography>\r\n                            <Divider sx={{ mt: 1 }} />\r\n                            <Typography variant=\"h5\">vehicle description</Typography>\r\n                            <Typography variant=\"body1\" maxWidth={800}>\r\n                                {SingleProperty.Description}\r\n                            </Typography>\r\n                        </Stack>\r\n                        <Divider sx={{ mt: 1 }} />\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                        item\r\n                        lg={5}\r\n                        sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'flex-end',\r\n                            alignItems: 'flex-end',\r\n\r\n                        }}\r\n                    >\r\n\r\n                        <BookingCard SingleProperty={SingleProperty}/>\r\n\r\n                    </Grid>\r\n\r\n                    {/* <Grid lg={3} pt={2}\r\n                    sx={{\r\n                        width: 300,\r\n                        height: '200px',\r\n                        p: 2,\r\n                        mt:6,\r\n                        borderStyle: 'solid',\r\n                        borderWidth: '.2px',\r\n                        borderColor: '#dddddd',\r\n                        boxShadow: 2,\r\n                    }}\r\n                    >\r\n                        <Typography variant=\"h5\">\r\n                            Available Amenities\r\n                        </Typography>\r\n                        <Box width={300} pt={2}>\r\n\r\n                            <h1>bdhjbsdfdhf</h1>\r\n                    {/* {amenity.map((item, index) => (\r\n                                <>\r\n                                    <Amenities key={index} KEY={item} />\r\n                                    <Box m={1} />\r\n                                </>\r\n                            ))}  */}\r\n                    {/* </Box>\r\n                    </Grid> */}\r\n                </Grid>\r\n            </Box>\r\n        </Container>\r\n    )\r\n\r\n}"],"names":["BookingCard","_ref","SingleProperty","userid","useSelector","state","user","id","navigate","useNavigate","_React$useState","React","dayjs","_React$useState2","_slicedToArray","startDate","setStartDate","_React$useState3","add","_React$useState4","endDate","setEndDate","_React$useState5","_React$useState6","counter","setCounter","_React$useState7","_React$useState8","days","setDays","_React$useState9","_React$useState10","totalAmount","setTotalAmount","handledate","date","format","$d","console","log","NotAvailable","disabledDates","map","dateString","_dateString$split","split","_dateString$split2","year","month","day","Date","shouldDisableDate","currentDate","some","disabledDate","getFullYear","getMonth","getDate","_jsx","Card","sx","width","height","p","borderStyle","borderWidth","borderColor","boxShadow","children","_jsxs","Stack","direction","spacing","Typography","variant","Price","LocalizationProvider","dateAdapter","AdapterDayjs","DemoContainer","components","DemoItem","label","DatePicker","onChange","value","disablePast","defaultValue","startDateStartOfDay","startOf","valueStartOfDay","isSame","diff","TotalAmt","minDate","_Fragment","Button","onClick","checkin","checkOut","totalAmunt","formattedStartDateToCheck","slice","formattedEndDateToCheck","includes","swal","title","text","concat","join","icon","buttons","dangerMode","checkout","then","response","window","location","href","data","url","catch","err","alert","hostid","handleReserve","startIcon","ChatIcon","senderid","receiverid","addconverstaion","Box","display","flexDirection","flexGrow","fontWeight","_SingleProperty$image","useParams","setSingleProperty","api","get","count","singleProperty","find","item","_id","Container","maxWidth","pt","color","marginTop","pl","PropertyName","LocationOnIcon","fontSize","Address","Grid","container","imageFilenames","img","index","_createElement","xs","sm","md","lg","key","minHeight","CardMedia","image","mt","justifyContent","Divider","Description","alignItems"],"sourceRoot":""}